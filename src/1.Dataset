import cv2
import numpy as np
from PIL import Image
from torch.utils.data import Dataset
import sys
import os
import glob
from torchvision import datasets, transforms
import albumentations as A  # 数据增广


class liver_DataSet(Dataset):

    def __init__(self, data_dir: str, train: bool, transform, imgSize):
        """
        data_drir = '../data/cleaned_data/train'
        """
        self.train = train
        self.transform = transform
        self.paths = self.GetPaths(data_dir)
        self.len = len(self.paths)
        self.imgSize = imgSize


    def __getitem__(self, index):
        path = self.paths[index]
        img = np.array(Image.open(path))  # 读取3通道png影像
        img_shape = img.shape  # 高 宽 通道
        mask = np.array(Image.open(self.GetMaskPath(path)))
        mask = mask/255
        # sample = A.Resize(self.imgSize, self.imgSize)(
        #     image=img, mask=mask)
        sample = A.PadIfNeeded(p=1, min_height=self.imgSize, min_width=self.imgSize)(image=img, mask=mask)
        # sample = A.CenterCrop(p=1, height=self.imgSize, width=self.imgSize)(image=img, mask=mask)
        img = sample['image']
        mask = sample['mask'].astype(np.int64)  # 转换数据类型

        # mask = mask[np.newaxis, :, :]  # Mask虽然只有一个波段，但是也要增加一个维度变成3维的
        img = self.transform(img)
        return img, mask, (path, img_shape)  # 返回原始的数据和对应的标注
        # if self.train:
        #     return img, mask  # 返回原始的数据和对应的标注
        # else:
        #     # img_shape = img.shape  # 高 宽 通道
        #     # img = self.transform_test(image=img)['image']  # 数据增广
        #     # img = get_preprocess_3band()(image=img)['image']  # 对影像做归一化处理
        #     # img_path = self.paths[index]
        #     return img

    def __len__(self):
        return self.len

    def GetPaths(self, folder):
        paths = glob.glob(os.path.join(folder, "*.png"))
        return paths

    def GetMaskPath(self, imgPath):
        """
        0cdf5b5d0ce1_01.jpg
        0cdf5b5d0ce1_01_mask.gif
        """
        if self.train:
            MaskPath = imgPath.replace('train', 'train_masks')
        else:
            MaskPath = imgPath.replace('test', 'test_masks')
        MaskPath = MaskPath.replace('.png', '_mask.png')
        return MaskPath


class carvana_image_DataSet(Dataset):

    def __init__(self, data_dir: str, train: bool, transform, imgSize):
        """
        data_drir = '../data/carvana_image/train'
        """
        self.train = train
        self.transform = transform
        self.paths = self.GetPaths(data_dir)
        self.len = len(self.paths)
        self.imgSize = imgSize


    def __getitem__(self, index):
        path = self.paths[index]
        img = np.array(Image.open(path))  # 读取3通道jpg影像
        img_shape = img.shape  # 高 宽 通道
        mask = np.array(Image.open(self.GetMaskPath(path)))

        sample = A.Resize(self.imgSize, self.imgSize)(
            image=img, mask=mask)

        img = sample['image']
        mask = sample['mask'].astype(np.int64)  # 转换数据类型

        # mask = mask[np.newaxis, :, :]  # Mask虽然只有一个波段，但是也要增加一个维度变成3维的
        img = self.transform(img)
        return img, mask, (path, img_shape)  # 返回原始的数据和对应的标注
        # if self.train:
        #     return img, mask  # 返回原始的数据和对应的标注
        # else:
        #     # img_shape = img.shape  # 高 宽 通道
        #     # img = self.transform_test(image=img)['image']  # 数据增广
        #     # img = get_preprocess_3band()(image=img)['image']  # 对影像做归一化处理
        #     # img_path = self.paths[index]
        #     return img

    def __len__(self):
        return self.len

    def GetPaths(self, folder):
        paths = glob.glob(os.path.join(folder, "*.jpg"))
        return paths

    def GetMaskPath(self, imgPath):
        """
        0cdf5b5d0ce1_01.jpg
        0cdf5b5d0ce1_01_mask.gif
        """
        if self.train:
            MaskPath = imgPath.replace('train', 'train_masks')
        else:
            MaskPath = imgPath.replace('test', 'test_masks')
        MaskPath = MaskPath.replace('.jpg', '_mask.gif')
        return MaskPath

if __name__ == '__main__':
    root = '../data/carvana_image/train'
    path = '../data/carvana_image/train_masks/0cdf5b5d0ce1_01_mask.gif'
    path = '../data/cleaned_dataset/train_masks/1_mask.png'
    name = os.path.split(path)[1]
    name = os.path.splitext(name)[0][:-4] + 'prediction.jpg'
    #
    # name = os.path.split(path[0])[1]
    # name = os.path.splitext(name)[0][:-4] + '_prediction.jpg'

    print(name)
    mask = np.array(Image.open(path))
    print(mask.shape)
    mask = mask[:, : ,1]/255
    print(mask.shape)

    print(mask[205][205])

    # apply_transform = transforms.Compose(
    #     [transforms.ToTensor(),
    #      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
    # d = carvana_image_DataSet(root, True, apply_transform, 512)
    # a = d[0]
    # print(len(a))
    # print(a[0].shape)
    # print(a[1].shape)
